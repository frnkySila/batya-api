
Документация по Web API сервера Batya IM
========================================

1. Введение
-----------

1.1. Входящий формат сообщения в JSON
'''''''''''''''''''''''''''''''''''''

Многие из запросов протокола возвращают помимо прочего сообщения, отправленные кому-то там или там хуй пойми короче. Во всех случаях JSON-объект сообщения имеет один и тот же формат:

::

    {
        guid: <guid>,
        sender: <sender>,
        timestamp: <timestamp>,
        type: <type>,
        content: <content>
    }

* *guid*: глобальный идентификатор сообщения. Применяется только для избежания дублей и пропусков в чате при повторном получении сообщения. Конкретное значение зависит от имплементации сервера, единственное требование — уникальность для каждого сообщения;
* *sender*: `username` отправителя. Используется только в запросах, где запрашиваются сообщения из конференции;
* *timestamp*: UNIX timestamp, обозначающий момент, когда сообщение пришло на сервер;
* *type*: тип сообщения (поддерживаемые типы см. ниже);
* *content*: содержание сообщение (кодировка в зависимости от типа)

======== ========================
type     content
======== ========================
text     Текст сообщения в UTF-8
image    *зарезервировано*
audio    *зарезервировано*
video    *зарезервировано*
sticker  *зарезервировано*
system   *см. ниже*
======== ========================

Прим.: типы сообщений кроме `text` будут имплементированы в будущих версиях протокола если вы хотя бы это сделаете.

1.1.1. Сообщения типа system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Сообщения данного типа генерируются системой при особых случаях.

::

  {
    "event": "dialog_created",
    "creator_id": <creator_id>
  }

..

1.2. Идентификатор диалога
''''''''''''''''''''''''''

Идентификатор диалога представляет собой либо имя пользователя, либо идентификатор конференции. Для того, чтобы разделить эти два пространства имен, инентификатор конференции предваряется символом плюса, а в имени пользователя этот символ запрещен:

============= ================================
Поле          Формат
============= ================================
username      :code:`[A-Za-z0-9_-]+`
conference_id :code:`\+[A-Za-z0-9]+`
dialog_id     :code:`conference_id | username`
============= ================================

1.3. Метка времени
''''''''''''''''''

Метки времени сообщений представляю собой UNIX timestamp, соответствующий тому моменту, когда сообщение было записано на сервере. Предполагается, что время на сервере точное и этот timestamp можно показывать пользователю.

1.4. Аутентификационный токен
'''''''''''''''''''''''''''''

Токен генерируется случайно для каждого пользователя при каждом логине. Представляет собой строку из 32 символов base64 по стандарту из `RFC 4648 §5 <https://tools.ietf.org/html/rfc4648#section-5>`_ (в нем используются символы :code:`-_=` вместо стандартных :code:`+/=`, т.к. :code:`/` имеет особенное значение в URL).

**Примечания по реализации:** естестевенно, для генерации этого токена следуюет применять криптографическую случайность, а не :code:`Random.randInt()` из стандартной библиотеки.

1.5. Логин и пароль
'''''''''''''''''''

На логин и пароль при регистрации накладываются следующие ограничения:

* логин состоит из символов :code:`[A-Za-z0-9_-]+` и имеет длину от 2 до 256 символов;

* пароль состоит из любых символов Unicode, кроме :code:`\0` (нулевой байт) и имеет длину от 10 до 256 символов.

1.6. Сообщения об ошибках
'''''''''''''''''''''''''

1.6.1. Формат сообщений об ошибках
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В общем случае сообщения об ошибках приходят с HTTP-кодом :code:`400 Bad Request` в следующем формате:

::

  {
    "error": <error_message>,
    "error_code": <error_code>
  }

..

  * *error_message*: текстовое описание ситуации;
  * *error_code*: целочисленный код ошибки.

1.6.2. Общие сообщения об ошибках
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Следующие ошибки могут возникнуть при выполнении любого или почти любого запроса:

============= ========================================================
*error_code*  Описание
============= ========================================================
:code:`1`     Прислан поврежденный JSON
:code:`2`     В присланном JSON отсутствуют некоторые необходимые поля
============= ========================================================


2. Список запросов
------------------

2.1. Авторизация пользователя
'''''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /login`

*  **URL Params:** *none*

* **Data Params:**

::

  {
    "username": "<username>",
    "password": "<password>"
  }

..

    * *password️*: plain text password

* **Success Response:**
  
      **Code:** :code:`200 Ok`

      **Content:** :code:`{ token: [token] }`

      *token*: аутентификационный токен пользователя
   
* **Error Response:**

      **Code:** :code:`403 Forbidden`

      **Content:** :code:`{ error : "Invalid username or password" }`

* **Sample Call:**

  *TODO: добавить пример на js*

2.2. Регистрация пользователя
'''''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /register`
  
*  **URL Params:** *none*

* **Data Params:**

::

  {
    "username": "<username>",
    "password": "<password>"
  }

* **Success Response:**
  
  **Code:** :code:`200 Ok`

  **Content:** :code:`{ token: [token] }`
  
  *token*: аутентификационный токен пользователя
 
* **Error Response:**

  ============= ========================================================
  *error_code*  Описание
  ============= ========================================================
  :code:`101`   Имя пользователя уже занято
  :code:`102`   Слишком короткий или слишком длинный пароль
  :code:`103`   Слишком короткое или слишком длинное имя пользователя
  :code:`104`   Недозволенные символы в пароле
  :code:`105`   Недозволенные символы в имени пользователя
  ============= ========================================================

2.3. Выход пользователя из системы
'''''''''''''''''''''''''''''''''''

При выходе из БД удаляются *все* токены этого пользователя, то есть, пользователь выходит со всех устройств.

* **Method/URL:** :code:`POST /:auth_token/logout`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64)

* **Success Response:**
  
      **Code:** :code:`200 Ok`

      **Content:** :code:`{ message : "Logged out" }`
   
* **Error Response:**

      **Code:** :code:`403 Forbidden`

      **Content:** :code:`{ error : "Not logged in" }`

      Возникает, когда такого токена в БД нет (пользователь и не был залогинен)

2.4. Получение списка контактов
'''''''''''''''''''''''''''''''

Список контактов — список объектов, состоящих из идентификатора диалога (см. п. 1.2) и последнего сообщения в диалоге.

Список сортируется по дате последнего сообщения в порядке убывания. В одном ответе приходит не более 25 контактов.

* **Method/URL:** :code:`GET /:auth_token/contacts[/offset/:offset]`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *offset*: количество контактов, которые неободимо пропустить с начала

* **Success Response:**
  
  **Code:** :code:`200 Ok`

  **Content:**

::

    {
      dialogs:
        [
          {
            "dialog_id": "<dialog_id>",
            "last_message": {
              "guid": "<guid>",
              "sender": "<sender>",
              "timestamp": <timestamp>,
              "type": "<type>",
              "content": "<content>"
            }
          },
          ...
        ]
    }

..

    * *dialog_id*: идентификатор диалога (см. п. 1.2);
    * формат объекта сообщения см. п. 1.1. Поле `sender` в нем содержится только если `dialog_id` обозначает конференцию

2.5. Получение последних сообщений из диалога
'''''''''''''''''''''''''''''''''''''''''''''

Приходит запрошенное количество послених (хронологически) сообщений из выбранного диалога.

* **Method/URL:** :code:`GET /:auth_token/messages/:dialog_id[/limit/:limit[/skip/:offset]]`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога (см. п. 1.2);
  * *limit*: количество запрашиваемых сообщений (по умолчанию 25);
  * *offset*: сколько сообщений пропустить, начиная с последнего (по умолчанию 0)

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

    {
        "messages":
            [
              {
                  "guid": "<guid>",
                  "sender": "<sender>",
                  "timestamp": <timestamp>,
                  "type": "<type>",
                  "content": "<content>"
              },
              ...
            ]
    }

..
    
2.6. Получение сообщений из диалога, пришедших начиная с определенного момента
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Приходят сообщения, время прихода которых больше или равно указанному.

* **Method/URL:** :code:`GET /<auth_token>/messages/:dialog_id/after/:timestamp[/limit/:limit][/long]`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога (см. п. 1.2);
  * *timestamp*: timestamp, начиная с которого (включительно) запрашиваются сообщения;
  * *limit*: верхний предел количества присылаемых сообщений (по умолчанию 25);
  * *long*: наличие ключа указывает, что клиент желает произвести long polling по данному запросу: если сообщений по запросу не существует, ответ не приходит, пока они не появятся на сервере

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

    {
        "messages":
            [
              {
                  "guid": "<guid>",
                  "sender": "<sender>",
                  "timestamp": <timestamp>,
                  "type": "<type>",
                  "content": "<content>"
              },
              ...
            ]
    }

..

2.7. Отправка сообщения
'''''''''''''''''''''''

* **Method/URL:** :code:`POST /:auth_token/messages/send/:dialog_id`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога (см. п. 1.2), в который предполгаается отправить сообщение

* **POST Params:**

  * *type*: тип сообщения (см. п. 1.1);
  * *content*: содержимое сообщения (то же)

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:** 

::

  {
      "timestamp": <timestamp>
  }

..

  * *timestamp*: серверное время прихода данного сообщения

* **Error Response:**

  * **Code:** :code:`403 Forbidden`

  * **Content:**

::

  {
      "error": "Destination user does not exist"
  }

..

2.8. Получение имени пользователя или названия диалога
''''''''''''''''''''''''''''''''''''''''''''''''''''''

* **Method/URL:** :code:`GET /:auth_token/name/:dialog_id`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога, имя которого предполагается получить

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

    {
        "dialog_name": "<dialog_name>"
    }

..

  * *dialog_name*: имя диалога

2.9. Устрановка имени пользователя или названия диалога
'''''''''''''''''''''''''''''''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /:auth_token/name[/:dialog_id]`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога, имя которого предполагается установить. При отсутствии устанавливается имя пользователя, от имени которого пришел запрос

* **POST Params:**

::

    {
        "new_name": "<new_name>"
    }

..

  * *new_name*: имя, которое предполагается установить для выбранного диалога

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

2.10. Создание конференции
''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /:auth_token/conferences/create`

* **POST Params:** *none*

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

  {
      "conference_id": "<conference_id>"
  }

..

  * *conference_id*: идентификатор вновь созданной конференции

2.11. Добавление пользователя в конференцию
'''''''''''''''''''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /:auth_token/conferences/:conference_id/invite/:user_id`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *conference_id*: идентификатор конференции, в которую нужно добавить пользователя;
  * *user_id*: идентификатор пользователя, которого нужно добавить

* **POST Params:** *none*

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

2.12. Удаление пользователя из конференции
''''''''''''''''''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /:auth_token/conferences/:conference_id/kick/:user_id`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *conference_id*: идентификатор конференции, из которой нужно удалить пользователя;
  * *user_id*: идентификатор пользователя, которого нужно удалить

* **POST Params:** *none*

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

2.13. Покидание конференции
'''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /:auth_token/conferences/:conference_id/leave`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *conference_id*: идентификатор конференции, которую нужно покинуть

* **POST Params:** *none*

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

2.14. Получение списка участников коференции
''''''''''''''''''''''''''''''''''''''''''''

* **Method/URL:** :code:`GET /:auth_token/conferences/:conference_id/user_list`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *conference_id*: идентификатор конференции, список участников которой предполагается получить

* **POST Params:** *none*

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

    {
        "originator": <originator_id>,
        "users":
            [
              {
                  "user_id": <user_id>,
                  "join_time": <timestamp>
              },
              ...
            ]
    }

..

    * *originator_id*: идентификатор создателя конференции;
    * *user_id*: идентификатор соответствующего участника;
    * *join_time*: время его добавления в конференцию

2.15. Поиск по именам и идентификаторам пользователей
'''''''''''''''''''''''''''''''''''''''''''''''''''''

* **Method/URL:** :code:`GET /:auth_token/search_users/:search_request`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *search_request*: поисковый запрос (url-encoded)

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

    {
        "user_ids":
            [
              <user_id>, ... <up to 24 more> ...
            ]
    }

..

    * *user_id*: идентификатор соответствующего пользователя (в ответ на один поисковый запрос возвращается не более 25 результатов)

2.16. Получение аватарки диалога
''''''''''''''''''''''''''''''''

* **Method/URL:** :code:`GET /:auth_token/avatar/:dialog_id`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога, аватарку которого предполагается получить

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Headers:**

::

  Content-type: image/png

..

  * **Content:** *двоичное представление картинки в формате PNG*

2.17. Установка аватарки пользователя или конференции
'''''''''''''''''''''''''''''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /:auth_token/avatar[/:conference_id]`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *conference_id*: идентификатор конференции, аватарку которой предполагается установить. В случае отсутствия параметра предполагается, что устаналивается аватарка залогиненного на данный момент пользователя

*  **POST Params:**

  С типом содержимого :code:`multipart/form-data` заливается картинка в формате PNG или JPEG размером не более 500x500 пикселей.

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:** *хз*

*TODO: переделать этот метод и предыдущий для возможности использовать CDN*
