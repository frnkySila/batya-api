
Документация по Web API сервера Batya IM
========================================

1. Введение
-----------

1.1. Входящий формат сообщения в JSON
'''''''''''''''''''''''''''''''''''''

Многие из запросов протокола возвращают помимо прочего сообщения, отправленные кому-то там или там хуй пойми короче. Во всех случаях JSON-объект сообщения имеет один и тот же формат:

::

    {
        guid: [guid],
        [dialog_id: [dialog_id],]
        [sender: [sender]],
        timestamp: [timestamp],
        type: [type],
        content: [content]
    }

* *guid*: глобальный идентификатор сообщения. Применяется для избежания дублей в чате при повторном получении сообщения;
* *dialog_id* (опциональное поле): при наличии означает, что сообщение было отправлено в конференцию с данным `dialog_id`. Используется только в запросах, где таковое не указано в параметрах запроса;
* *sender* (опциональное поле): `username` отправителя. Используется только в запросах, где таковое не указано в параметрах запроса;
* *timestamp*: UNIX timestamp, обозначающий момент, когда сообщение пришло на сервер;
* *type*: тип сообщения (поддерживаемые типы см. ниже);
* *content*: содержание сообщение (кодировка в зависимости от типа)

======== ========================
type     content
======== ========================
text     Текст сообщения в UTF-8
image    *зарезервировано*
audio    *зарезервировано*
video    *зарезервировано*
sticker  *зарезервировано*
======== ========================

Прим.: типы сообщений кроме `text` будут имплементированы в будущих версиях протокола если вы хотя бы это сделаете.

1.2. Идентификатор диалога
''''''''''''''''''''''''''

Идентификатор диалога представляет собой либо имя пользователя, либо идентификатор конференции. Для того, чтобы разделить эти два пространства имен, инентификатор конференции предваряется символом плюса, а в имени пользователя этот символ запрещен:

============= ================================
Поле          Формат
============= ================================
username      :code:`[A-Za-z0-9_-]+`
conference_id :code:`\+[A-Za-z0-9]+`
dialog_id     :code:`conference_id | username`
============= ================================

1.3. Метка времени
''''''''''''''''''

Метки времени сообщений представляю собой UNIX timestamp, соответствующий тому моменту, когда сообщение было записано на сервере. Предполагается, что время на сервере точное и этот timestamp можно показывать пользователю.

1.4. Аутентификационный токен
'''''''''''''''''''''''''''''

Токен генерируется случайно для каждого пользователя при каждом логине. Представляет собой строку из 32 символов base64 по стандарту из `RFC 4648 §5 <https://tools.ietf.org/html/rfc4648#section-5>`_ (в нем используются символы :code:`-_=` вместо стандартных :code:`+/=`, т.к. :code:`/` имеет особенное значение в URL).

**Примечания по реализации:** естестевенно, для генерации этого токена следуюет применять криптографическую случайность, а не :code:`Random.randInt()` из стандартной библиотеки.

2. Список запросов
------------------

2.1. Авторизация пользователя
'''''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /login`

*  **URL Params:** *none*

* **Data Params:**

::

  {
    username: [username],
    password: [password]
  }

..

    * *password️*: plain text password

* **Success Response:**
  
      **Code:** :code:`200 Ok`

      **Content:** :code:`{ token: [token] }`

      *token*: аутентификационный токен пользователя
   
* **Error Response:**

      **Code:** :code:`403 Forbidden`

      **Content:** :code:`{ error : "Invalid username or password" }`

* **Sample Call:**

  *TODO: добавить пример на js*

2.2. Регистрация пользователя
'''''''''''''''''''''''''''''

* **Method/URL:** :code:`POST /register`
  
*  **URL Params:** *none*

* **Data Params:**

::

  {
    username: [username],
    password: [password]
  }

* **Success Response:**
  
  **Code:** :code:`200 Ok`

  **Content:** :code:`{ token: [token] }`
  
  *token*: аутентификационный токен пользователя
 
* **Error Response:**

  * **Code:** :code:`403 Forbidden`

  * **Content:** :code:`{ error : "Username already taken" }`

* **Sample Call:**

  *TODO: добавить пример на js*

2.2а. Выход пользователя из системы
'''''''''''''''''''''''''''''''''''

При выходе из БД удаляются *все* токены этого пользователя, то есть, пользователь выходит со всех устройств.

* **Method/URL:** :code:`POST /:auth_token/logout`

*  **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64)

* **Success Response:**
  
      **Code:** :code:`200 Ok`

      **Content:** :code:`{ message : "Logged out" }`
   
* **Error Response:**

      **Code:** :code:`403 Forbidden`

      **Content:** :code:`{ error : "Not logged in" }`

      Возникает, когда такого токена в БД нет (пользователь и не был залогинен)

2.3. Получение списка контактов
'''''''''''''''''''''''''''''''

Список контактов — список объектов, состоящих из идентификатора диалога (см. п. 1.2) и последнего сообщения в диалоге.

Список сортируется по дате последнего сообщения в порядке убывания. В одном ответе приходит не более 25 контактов.

* **Method/URL:** :code:`GET /:auth_token/contacts[/offset/:offset]`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *offset*: количество контактов, которые неободимо пропустить с начала

* **Success Response:**
  
  **Code:** :code:`200 Ok`

  **Content:**

::

    [
      {
        dialog_id: [dialog_id],
        last_message: {
            guid: [guid],
            [sender: [sender]],
            timestamp: [timestamp],
            type: [type],
            content: [content]
        }
      },
      ...
    ]
    
..

    * *dialog_id*: идентификатор диалога (см. п. 1.2);
    * формат объекта сообщения см. п. 1.1. Поле `sender` в нем содержится только если `dialog_id` обозначает конференцию

2.4. Получение последних сообщений из диалога
'''''''''''''''''''''''''''''''''''''''''''''

Приходит запрошенное количество послених (хронологически) сообщений из выбранного диалога.

* **Method/URL:** :code:`GET /:auth_token/messages/:dialog_id[/limit/:limit[/skip/:offset]]`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога (см. п. 1.2);
  * *limit*: количество запрашиваемых сообщений (по умолчанию 25);
  * *offset*: сколько сообщений пропустить, начиная с последнего (по умолчанию 0)

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

    {
        messages:
            [
              {
                dialog_id: [dialog_id],
                last_message: {
                    guid: [guid],
                    [sender: [sender]],
                    timestamp: [timestamp],
                    type: [type],
                    content: [content]
                }
              },
              ...
            ]
    }

..
    
2.5. Получение сообщений из диалога, пришедших начиная с определенного момента
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Приходят сообщения, время прихода которых больше или равно указанному.

* **Method/URL:** :code:`GET /<auth_token>/messages/:dialog_id/after/:timestamp[/limit/:limit]`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога (см. п. 1.2);
  * *timestamp*: timestamp, начиная с которого (включительно) запрашиваются сообщения;
  * *limit*: верхний предел количества присылаемых сообщений (по умолчанию 25)

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

    {
        messages:
            [
              {
                dialog_id: [dialog_id],
                last_message: {
                    guid: [guid],
                    [sender: [sender]],
                    timestamp: [timestamp],
                    type: [type],
                    content: [content]
                }
              },
              ...
            ]
    }

2.6. Получение сообщений из диалога, пришедших начиная с определенного момента (long polling)
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Long-polling-версия предыдущего запроса. (Возможно, отдельная такая не нужна? Хз)

* **Method/URL:** :code:`GET /<auth_token>/messages/:dialog_id/after/:timestamp/long`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога (см. п. 1.2);
  * *timestamp*: timestamp, начиная с которого (включительно) запрашиваются сообщения

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

  * **Content:**

::

    {
        messages:
            [
              {
                dialog_id: [dialog_id],
                last_message: {
                    guid: [guid],
                    [sender: [sender]],
                    timestamp: [timestamp],
                    type: [type],
                    content: [content]
                }
              },
              ...
            ]
    }



2.7. Отправка сообщения
'''''''''''''''''''''''

* **Method/URL:** :code:`POST /:auth_token/messages/send/:dialog_id`

* **URL Params:**

  * *auth_token*: аутентификационный токен пользователя (32 символа base64);
  * *dialog_id*: идентификатор диалога (см. п. 1.2), в который предполгаается отправить сообщение

* **POST Params:**

  * *type*: тип сообщения (см. п. 1.1);
  * *content*: содержимое сообщения (то же)

* **Success Response:**
  
  * **Code:** :code:`200 Ok`

* **Error Response:**

    TODO


